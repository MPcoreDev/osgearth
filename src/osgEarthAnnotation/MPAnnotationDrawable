/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGEARTH_ANNOTATION_DRAWABLE_H
#define OSGEARTH_ANNOTATION_DRAWABLE_H 1


#include <osg/Geometry>

#include <osgEarthSymbology/Style>
#include <osgEarthAnnotation/MPStateSetFontAltas>
#include <osgEarth/MPScreenSpaceLayout>


namespace osgEarth { namespace Annotation
{

class OSGEARTHANNO_EXPORT LODAnno
{
public:
    LODAnno(double alt, const std::vector<GLushort> &pDrawElt);
    double altitudeMax{DBL_MAX};
    std::vector<GLushort> drawElts;
};

class OSGEARTHANNO_EXPORT MPAnnotationDrawable : public MPScreenSpaceGeometry
{

public:

    MPAnnotationDrawable(const osgEarth::Symbology::Style& style, const osgDB::Options* readOptions);

    /** set the right geometry LOD according to the cam altitude **/
    void setAltitude(double alt);

    /** get wether the annotation has some part displayed or if it is complety hidden **/
    bool isFullyHidden() { return _d->size() == 0; }

protected:

    virtual ~MPAnnotationDrawable() { }

    void buildStateSet(const osgEarth::Symbology::Style& style);
    void buildGeometry(const osgEarth::Symbology::Style& style);

    float appendIcon(const std::string& urlPath, double alt = DBL_MAX, float xMax = FLT_MAX);
    int appendText(const std::string &text, const std::string &font, const osg::Vec4 &color = Color::White, double fontSize = 16., double alt = DBL_MAX);
    void moveTextPosition(int nbVertices, const osg::BoundingBox& refBBox,
                          osgEarth::Symbology::TextSymbol::Alignment alignment = osgEarth::Symbology::TextSymbol::Alignment::ALIGN_CENTER_CENTER);

    void pushDrawElements(double alt, const std::vector<GLushort> &pDrawElt);

    void dirty();

    std::vector<LODAnno> _LODlist;
    static std::map<std::string, osg::observer_ptr<MPStateSetFontAltas>> s_atlasStateSetList;

    osg::ref_ptr<osg::Vec3Array> _v {nullptr};
    osg::ref_ptr<osg::Vec4Array> _c {nullptr};
    osg::ref_ptr<osg::Vec2Array> _t {nullptr};
    osg::ref_ptr<osg::Vec4Array>  _infoArray {nullptr};
    osg::ref_ptr<osg::DrawElementsUShort> _d {nullptr};

    URIContext _context;
    const osgDB::Options* _readOptions {nullptr};
    double _scale {1.};
    float _bbox_margin {2.};
    float _icon_margin {5.};
    float _multi_text_margin {4.};
    std::string _mainFont;
    double _mainFontSize {16.};
    double _altFirstLevel {DBL_MAX};
    osgText::String::Encoding _text_encoding{osgText::String::ENCODING_UNDEFINED};
    double _camAlt {0.};
    int _LOD {-1};
};

} }


#endif
